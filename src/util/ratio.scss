////
/// @group ratio
////

/// height ratios map.
/// to manage ratios as map, you can convert it to css-vars easily.
/// DO NOT DELETE normal key !! (this is default value of @aspect mixin).
$ratios: (
  square: (
    1 / 1
  ),
  normal: (
    1 / 4 * 3
  ),
  silver: (
    1 / 1.414
  ),
  film: (
    1 / 3 * 2
  ),
  golden: (
    1 / 1.6
  ),
  logo: (
    1 / 1.66
  ),
  wide: (
    1 / 16 * 9
  ),
  cinema: (
    1 / 47 * 20
  ),
  banner: (
    1 / 3
  ),
  bronze: (
    1 / 3.303
  )
) !default;

/// @param {$ratios key} $name
/// @return {float} $ratios val (height ratio).
@function ratio($name) {
  $target: map-get($ratios, $name);

  @return ceil($target * 1000) / 1000;
}

/// set the ratio * width as height (padding-top).
///
/// this is for iframe, img video and so on.
/// @param {$ratios key} $name [normal]
/// @param {'cover' | 'contain'} $fit [cover]
/// @param {selector} $selector ['img'] - child selector
/// @param {'before' | 'after'} $pseudo ['after'] - this has the 'ratio height' (padding-top)
@mixin aspect($name: normal, $fit: cover, $selector: 'img', $pseudo: 'after') {
  position: relative;
  display: block;
  flex-shrink: 0;
  width: 100%;
  height: auto;
  overflow: hidden;

  &:#{$pseudo} {
    display: block;
    width: 100%;
    padding-top: percentage(ratio($name));
    content: '';
  }

  > #{$selector} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;

    @if $fit == cover {
      object-fit: cover;
    }

    @if $fit == contain {
      object-fit: contain;
    }
  }
}
